<?php

namespace LKE\BlogBundle\Repository;

use LKE\BlogBundle\Entity\Category;
use LKE\BlogBundle\Entity\Tag;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    private function getQb($qb = null)
    {
        return is_null($qb) ? $this->createQueryBuilder('p') : $qb;
    }

    private function qbForPublishedPost($qb = null)
    {
        $now = new \DateTime();

        $qb = $this->getQb($qb)
                    ->where('p.publishedAt < :now')
                    ->setParameter('now', $now)
                    ->orderBy('p.publishedAt', 'DESC');

        return $qb;
    }

    private function bySlug($slug, $qb = null)
    {
        $qb = $this->getQb($qb)
                    ->andWhere("p.slug = :slug")
                    ->setParameter("slug", $slug);

        return $qb;
    }

    private function previewPost($qb = null)
    {
        $qb = $this->qbForPublishedPost($qb)
                    ->leftJoin('p.image', 'i')
                    ->leftJoin('p.category', 'c')
                    ->addSelect('i')
                    ->addSelect('c');

        return $qb;
    }

    private function fullPost($qb = null)
    {
        $qb = $this->previewPost($qb)
                    ->leftJoin('p.tags', 't')
                    ->leftJoin('p.comments', 'co')
                    ->addSelect('t')
                    ->addSelect('co');

        return $qb;
    }

    private function byTag(Tag $tag, $qb = null)
    {
        $qb = $this->getQb($qb)
                    ->leftJoin("p.tags", 't')
                    ->andWhere("t = :tag")
                    ->setParameter("tag", $tag);

        return $qb;
    }

    private function byCategory(Category $category, $qb = null)
    {
        $qb = $this->getQb($qb)
            ->andWhere("c = :category")
            ->setParameter("category", $category);

        return $qb;
    }

    private function pagine($limit, $page, $qb = null)
    {
        $qb = $this->getQb($qb)
                ->setMaxResults($limit)
                ->setFirstResult(($page - 1) * $limit);

        return $qb;
    }

    public function findLastPublishedPost($limit = 5)
    {
        $qb = $this->queryListPublishedPost($limit, 1);

        return $qb->getQuery()->getResult();
    }

    public function queryListPublishedPost($limit, $page)
    {
        $qb = $this->qbForPublishedPost();
        $qb = $this->previewPost($qb);
        $qb = $this->pagine($limit, $page, $qb);

        return $qb;
    }

    public function findFullBySlug($slug)
    {
        $qb = $this->fullPost();
        $qb = $this->bySlug($slug, $qb);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findBySlug($slug)
    {
        $qb = $this->bySlug($slug);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findPreviewByTag(Tag $tag)
    {
        $qb = $this->previewPost();
        $qb = $this->byTag($tag, $qb);

        return $qb->getQuery()->getResult();
    }

    public function findPreviewByCategory(Category $category)
    {
        $qb = $this->previewPost();
        $qb = $this->byCategory($category, $qb);

        return $qb->getQuery()->getResult();
    }

    public function countPostPerCategory(Category $category)
    {
        $qb = $this->qbForPublishedPost()
                    ->leftJoin('p.category', 'c');
        $qb = $this->byCategory($category, $qb);
        $qb->select("COUNT(p)");

        return $qb->getQuery()->getSingleScalarResult();
    }
}
